# Name of your application. Used to uniquely configure containers.
service: dikeh

# Name of the container image.
image: alexohre/dikeh

# Storage location
# volumes:
#   - "/storage:/rails/storage"

ssh:
  proxy:
    - 157.245.29.158
    # Assumed load balancer IPV4 address

# Deploy to these servers.
servers:
  web:
    hosts:
      - 10.106.0.2
      - 10.106.0.4

    # labels:
    #   traefik.http.routers.app_name.rule: Host(`example.com`)
    #   traefik.http.routers.app_name_secure.entrypoints: websecure
    #   traefik.http.routers.app_name_secure.rule: Host(`example.com`)
    #   traefik.http.routers.app_name_secure.tls: true
    #   traefik.http.routers.app_name_secure.tls.certresolver: letsencrypt

  # traefik:
  #   options:
  #     publish:
  #       - "443:443"
  #     # volume:
  #     #   - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  #   args:
  #     entryPoints.web.address: ":80"
  #     entryPoints.websecure.address: ":443"
  #     certificatesResolvers.letsencrypt.acme.email: "please@dont.spam" # change to a real email
  #     certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
  #     certificatesResolvers.letsencrypt.acme.httpchallenge: true
  #     certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

  # But first you'll have to manually create the acme.json file and give it correct permissions on each hosts:
  # mkdir -p /letsencrypt && touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json

  job:
    hosts:
      - 10.106.0.2
      - 10.106.0.4

    # Or something like bin/job
    cmd: bundle exec sidekiq

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: alexohre

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD
# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: 10.106.0.5
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
    - REDIS_URL
    - EMAIL_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
builder:
  args:
    RUBY_VERSION: 3.2.2
  #   secrets:
  #     - GITHUB_TOKEN
  # remote:
  #   arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:15
    host: 10.106.0.5
    port: 5432
    env:
      clear:
        POSTGRES_USER: dikeh
        POSTGRES_DB: dikeh_production
      secret:
        - POSTGRES_PASSWORD
    files:
      # - config/postgres/production.cnf:/etc/postgresql/my.conf
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql # This should be formatted as an array
    directories:
      - data:/var/lib/postgresql/data # Volume for PostgreSQL data
  redis:
    image: redis:7.0
    host: 10.106.0.6
    port: 6379
    roles:
      - web
      - job
    cmd: "redis-server"
    # volumes:
    #   - /var/lib/redis:/data
    directories:
      - data:/data # Volume for Redis data

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  port: 3000
  interval: 10s
# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
